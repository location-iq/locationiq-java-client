/*
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.locationiq.client.api;

import com.locationiq.client.ApiCallback;
import com.locationiq.client.ApiClient;
import com.locationiq.client.ApiException;
import com.locationiq.client.ApiResponse;
import com.locationiq.client.Configuration;
import com.locationiq.client.Pair;
import com.locationiq.client.ProgressRequestBody;
import com.locationiq.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.locationiq.client.model.DirectionsMatching;
import com.locationiq.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MatchingApi {
    private ApiClient localVarApiClient;

    public MatchingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MatchingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for matching
     * @param coordinates String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 (required)
     * @param generateHints Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
     * @param approaches Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
     * @param exclude Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
     * @param bearings Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
     * @param radiuses Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
     * @param steps Returned route steps for each route leg [ true, false (default) ] (optional)
     * @param annotations Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;\&quot;false\&quot;&quot;)
     * @param geometries Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;\&quot;polyline\&quot;&quot;)
     * @param overview Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;\&quot;simplified\&quot;&quot;)
     * @param timestamps Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. [ {timestamp};{timestamp}[;{timestamp} ...]  integer seconds since UNIX epoch (optional)
     * @param gaps Allows the input track splitting based on huge timestamp gaps between points. [ split (default), ignore ] (optional, default to &quot;\&quot;split\&quot;&quot;)
     * @param tidy Allows the input track modification to obtain better matching quality for noisy tracks. [ true, false (default) ] (optional, default to &quot;\&quot;false\&quot;&quot;)
     * @param waypoints Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. [ {index};{index};{index}... ] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request has been made from an unauthorized domain. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No location or places were found for the given input </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request exceeded the rate-limits set on your account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchingCall(String coordinates, String generateHints, String approaches, String exclude, String bearings, String radiuses, String steps, String annotations, String geometries, String overview, String timestamps, String gaps, String tidy, String waypoints, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matching/driving/{coordinates}"
            .replaceAll("\\{" + "coordinates" + "\\}", localVarApiClient.escapeString(coordinates.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (generateHints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generate_hints", generateHints));
        }

        if (approaches != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approaches", approaches));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (bearings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bearings", bearings));
        }

        if (radiuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radiuses", radiuses));
        }

        if (steps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("steps", steps));
        }

        if (annotations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("annotations", annotations));
        }

        if (geometries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geometries", geometries));
        }

        if (overview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overview", overview));
        }

        if (timestamps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamps", timestamps));
        }

        if (gaps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gaps", gaps));
        }

        if (tidy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tidy", tidy));
        }

        if (waypoints != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("waypoints", waypoints));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchingValidateBeforeCall(String coordinates, String generateHints, String approaches, String exclude, String bearings, String radiuses, String steps, String annotations, String geometries, String overview, String timestamps, String gaps, String tidy, String waypoints, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'coordinates' is set
        if (coordinates == null) {
            throw new ApiException("Missing the required parameter 'coordinates' when calling matching(Async)");
        }
        

        okhttp3.Call localVarCall = matchingCall(coordinates, generateHints, approaches, exclude, bearings, radiuses, steps, annotations, geometries, overview, timestamps, gaps, tidy, waypoints, _callback);
        return localVarCall;

    }

    /**
     * Matching Service
     * Matching API matches or snaps given GPS points to the road network in the most plausible way.  Please note the request might result multiple sub-traces.  Large jumps in the timestamps (&gt; 60s) or improbable transitions lead to trace splits if a complete matching could not be found. The algorithm might not be able to match all points. Outliers are removed if they can not be matched successfully.
     * @param coordinates String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 (required)
     * @param generateHints Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
     * @param approaches Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
     * @param exclude Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
     * @param bearings Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
     * @param radiuses Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
     * @param steps Returned route steps for each route leg [ true, false (default) ] (optional)
     * @param annotations Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;\&quot;false\&quot;&quot;)
     * @param geometries Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;\&quot;polyline\&quot;&quot;)
     * @param overview Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;\&quot;simplified\&quot;&quot;)
     * @param timestamps Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. [ {timestamp};{timestamp}[;{timestamp} ...]  integer seconds since UNIX epoch (optional)
     * @param gaps Allows the input track splitting based on huge timestamp gaps between points. [ split (default), ignore ] (optional, default to &quot;\&quot;split\&quot;&quot;)
     * @param tidy Allows the input track modification to obtain better matching quality for noisy tracks. [ true, false (default) ] (optional, default to &quot;\&quot;false\&quot;&quot;)
     * @param waypoints Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. [ {index};{index};{index}... ] (optional)
     * @return DirectionsMatching
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request has been made from an unauthorized domain. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No location or places were found for the given input </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request exceeded the rate-limits set on your account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public DirectionsMatching matching(String coordinates, String generateHints, String approaches, String exclude, String bearings, String radiuses, String steps, String annotations, String geometries, String overview, String timestamps, String gaps, String tidy, String waypoints) throws ApiException {
        ApiResponse<DirectionsMatching> localVarResp = matchingWithHttpInfo(coordinates, generateHints, approaches, exclude, bearings, radiuses, steps, annotations, geometries, overview, timestamps, gaps, tidy, waypoints);
        return localVarResp.getData();
    }

    /**
     * Matching Service
     * Matching API matches or snaps given GPS points to the road network in the most plausible way.  Please note the request might result multiple sub-traces.  Large jumps in the timestamps (&gt; 60s) or improbable transitions lead to trace splits if a complete matching could not be found. The algorithm might not be able to match all points. Outliers are removed if they can not be matched successfully.
     * @param coordinates String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 (required)
     * @param generateHints Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
     * @param approaches Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
     * @param exclude Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
     * @param bearings Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
     * @param radiuses Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
     * @param steps Returned route steps for each route leg [ true, false (default) ] (optional)
     * @param annotations Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;\&quot;false\&quot;&quot;)
     * @param geometries Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;\&quot;polyline\&quot;&quot;)
     * @param overview Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;\&quot;simplified\&quot;&quot;)
     * @param timestamps Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. [ {timestamp};{timestamp}[;{timestamp} ...]  integer seconds since UNIX epoch (optional)
     * @param gaps Allows the input track splitting based on huge timestamp gaps between points. [ split (default), ignore ] (optional, default to &quot;\&quot;split\&quot;&quot;)
     * @param tidy Allows the input track modification to obtain better matching quality for noisy tracks. [ true, false (default) ] (optional, default to &quot;\&quot;false\&quot;&quot;)
     * @param waypoints Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. [ {index};{index};{index}... ] (optional)
     * @return ApiResponse&lt;DirectionsMatching&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request has been made from an unauthorized domain. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No location or places were found for the given input </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request exceeded the rate-limits set on your account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectionsMatching> matchingWithHttpInfo(String coordinates, String generateHints, String approaches, String exclude, String bearings, String radiuses, String steps, String annotations, String geometries, String overview, String timestamps, String gaps, String tidy, String waypoints) throws ApiException {
        okhttp3.Call localVarCall = matchingValidateBeforeCall(coordinates, generateHints, approaches, exclude, bearings, radiuses, steps, annotations, geometries, overview, timestamps, gaps, tidy, waypoints, null);
        Type localVarReturnType = new TypeToken<DirectionsMatching>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Matching Service (asynchronously)
     * Matching API matches or snaps given GPS points to the road network in the most plausible way.  Please note the request might result multiple sub-traces.  Large jumps in the timestamps (&gt; 60s) or improbable transitions lead to trace splits if a complete matching could not be found. The algorithm might not be able to match all points. Outliers are removed if they can not be matched successfully.
     * @param coordinates String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5 (required)
     * @param generateHints Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)
     * @param approaches Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)
     * @param exclude Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)
     * @param bearings Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)
     * @param radiuses Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)
     * @param steps Returned route steps for each route leg [ true, false (default) ] (optional)
     * @param annotations Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;\&quot;false\&quot;&quot;)
     * @param geometries Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;\&quot;polyline\&quot;&quot;)
     * @param overview Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;\&quot;simplified\&quot;&quot;)
     * @param timestamps Timestamps for the input locations in seconds since UNIX epoch. Timestamps need to be monotonically increasing. [ {timestamp};{timestamp}[;{timestamp} ...]  integer seconds since UNIX epoch (optional)
     * @param gaps Allows the input track splitting based on huge timestamp gaps between points. [ split (default), ignore ] (optional, default to &quot;\&quot;split\&quot;&quot;)
     * @param tidy Allows the input track modification to obtain better matching quality for noisy tracks. [ true, false (default) ] (optional, default to &quot;\&quot;false\&quot;&quot;)
     * @param waypoints Treats input coordinates indicated by given indices as waypoints in returned Match object. Default is to treat all input coordinates as waypoints. [ {index};{index};{index}... ] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request has been made from an unauthorized domain. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No location or places were found for the given input </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request exceeded the rate-limits set on your account </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchingAsync(String coordinates, String generateHints, String approaches, String exclude, String bearings, String radiuses, String steps, String annotations, String geometries, String overview, String timestamps, String gaps, String tidy, String waypoints, final ApiCallback<DirectionsMatching> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchingValidateBeforeCall(coordinates, generateHints, approaches, exclude, bearings, radiuses, steps, annotations, geometries, overview, timestamps, gaps, tidy, waypoints, _callback);
        Type localVarReturnType = new TypeToken<DirectionsMatching>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
