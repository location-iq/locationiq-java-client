/*
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.locationiq.client.api;

import LocationIq.ApiException;
import com.locationiq.client.model.DirectionsMatching;
import com.locationiq.client.model.Error;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MatchingApi
 */
@Ignore
public class MatchingApiTest {

    private final MatchingApi api = new MatchingApi();

    
    /**
     * Matching Service
     *
     * Matching API matches or snaps given GPS points to the road network in the most plausible way.  Please note the request might result multiple sub-traces.  Large jumps in the timestamps (&gt; 60s) or improbable transitions lead to trace splits if a complete matching could not be found. The algorithm might not be able to match all points. Outliers are removed if they can not be matched successfully.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void matchingTest() throws ApiException {
        String coordinates = null;
        String generateHints = null;
        String approaches = null;
        String exclude = null;
        String bearings = null;
        String radiuses = null;
        String steps = null;
        String annotations = null;
        String geometries = null;
        String overview = null;
        String timestamps = null;
        String gaps = null;
        String tidy = null;
        String waypoints = null;
        DirectionsMatching response = api.matching(coordinates, generateHints, approaches, exclude, bearings, radiuses, steps, annotations, geometries, overview, timestamps, gaps, tidy, waypoints);

        // TODO: test validations
    }
    
}
